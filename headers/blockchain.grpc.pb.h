// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockchain.proto
#ifndef GRPC_blockchain_2eproto__INCLUDED
#define GRPC_blockchain_2eproto__INCLUDED

#include "blockchain.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace blockchain {

class BlockchainService final {
 public:
  static constexpr char const* service_full_name() {
    return "blockchain.BlockchainService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::blockchain::TransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::TransactionResponse>> AsyncAddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::TransactionResponse>>(AsyncAddTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::TransactionResponse>> PrepareAsyncAddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::TransactionResponse>>(PrepareAsyncAddTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::blockchain::Block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::Block>> AsyncGetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::Block>>(AsyncGetLastBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::Block>> PrepareAsyncGetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::Block>>(PrepareAsyncGetLastBlockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::TransactionResponse>* AsyncAddTransactionRaw(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::TransactionResponse>* PrepareAsyncAddTransactionRaw(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::Block>* AsyncGetLastBlockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::blockchain::Block>* PrepareAsyncGetLastBlockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::blockchain::TransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>> AsyncAddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>>(AsyncAddTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>> PrepareAsyncAddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>>(PrepareAsyncAddTransactionRaw(context, request, cq));
    }
    ::grpc::Status GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::blockchain::Block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::Block>> AsyncGetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::Block>>(AsyncGetLastBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::Block>> PrepareAsyncGetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::blockchain::Block>>(PrepareAsyncGetLastBlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response, std::function<void(::grpc::Status)>) override;
      void GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>* AsyncAddTransactionRaw(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>* PrepareAsyncAddTransactionRaw(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::Block>* AsyncGetLastBlockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::blockchain::Block>* PrepareAsyncGetLastBlockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddTransaction(::grpc::ServerContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response);
    virtual ::grpc::Status GetLastBlock(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddTransaction() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTransaction(::grpc::ServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTransaction(::grpc::ServerContext* context, ::blockchain::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::TransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLastBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastBlock(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastBlock(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::blockchain::Block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddTransaction<WithAsyncMethod_GetLastBlock<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddTransaction() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::blockchain::Transaction, ::blockchain::TransactionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response) { return this->AddTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_AddTransaction(
        ::grpc::MessageAllocator< ::blockchain::Transaction, ::blockchain::TransactionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::blockchain::Transaction, ::blockchain::TransactionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTransaction(::grpc::ServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLastBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLastBlock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::blockchain::Block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response) { return this->GetLastBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastBlock(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::blockchain::Block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::blockchain::Block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLastBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastBlock(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddTransaction<WithCallbackMethod_GetLastBlock<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddTransaction() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTransaction(::grpc::ServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLastBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastBlock(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddTransaction() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTransaction(::grpc::ServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLastBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastBlock(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddTransaction() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTransaction(::grpc::ServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLastBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLastBlock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLastBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastBlock(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLastBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddTransaction() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::blockchain::Transaction, ::blockchain::TransactionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::blockchain::Transaction, ::blockchain::TransactionResponse>* streamer) {
                       return this->StreamedAddTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTransaction(::grpc::ServerContext* /*context*/, const ::blockchain::Transaction* /*request*/, ::blockchain::TransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::blockchain::Transaction,::blockchain::TransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::blockchain::Block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::blockchain::Block>* streamer) {
                       return this->StreamedGetLastBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastBlock(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::blockchain::Block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::blockchain::Block>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddTransaction<WithStreamedUnaryMethod_GetLastBlock<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddTransaction<WithStreamedUnaryMethod_GetLastBlock<Service > > StreamedService;
};

}  // namespace blockchain


#endif  // GRPC_blockchain_2eproto__INCLUDED
