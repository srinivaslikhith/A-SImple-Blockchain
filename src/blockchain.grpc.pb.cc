// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockchain.proto

#include "blockchain.pb.h"
#include "blockchain.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace blockchain {

static const char* BlockchainService_method_names[] = {
  "/blockchain.BlockchainService/AddTransaction",
  "/blockchain.BlockchainService/GetLastBlock",
};

std::unique_ptr< BlockchainService::Stub> BlockchainService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BlockchainService::Stub> stub(new BlockchainService::Stub(channel, options));
  return stub;
}

BlockchainService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddTransaction_(BlockchainService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastBlock_(BlockchainService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BlockchainService::Stub::AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::blockchain::TransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::blockchain::Transaction, ::blockchain::TransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddTransaction_, context, request, response);
}

void BlockchainService::Stub::async::AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::blockchain::Transaction, ::blockchain::TransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTransaction_, context, request, response, std::move(f));
}

void BlockchainService::Stub::async::AddTransaction(::grpc::ClientContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>* BlockchainService::Stub::PrepareAsyncAddTransactionRaw(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blockchain::TransactionResponse, ::blockchain::Transaction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blockchain::TransactionResponse>* BlockchainService::Stub::AsyncAddTransactionRaw(::grpc::ClientContext* context, const ::blockchain::Transaction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BlockchainService::Stub::GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::blockchain::Block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::blockchain::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLastBlock_, context, request, response);
}

void BlockchainService::Stub::async::GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::blockchain::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastBlock_, context, request, response, std::move(f));
}

void BlockchainService::Stub::async::GetLastBlock(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLastBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::blockchain::Block>* BlockchainService::Stub::PrepareAsyncGetLastBlockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::blockchain::Block, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLastBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::blockchain::Block>* BlockchainService::Stub::AsyncGetLastBlockRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLastBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

BlockchainService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlockchainService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlockchainService::Service, ::blockchain::Transaction, ::blockchain::TransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BlockchainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::blockchain::Transaction* req,
             ::blockchain::TransactionResponse* resp) {
               return service->AddTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlockchainService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlockchainService::Service, ::google::protobuf::Empty, ::blockchain::Block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BlockchainService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::blockchain::Block* resp) {
               return service->GetLastBlock(ctx, req, resp);
             }, this)));
}

BlockchainService::Service::~Service() {
}

::grpc::Status BlockchainService::Service::AddTransaction(::grpc::ServerContext* context, const ::blockchain::Transaction* request, ::blockchain::TransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlockchainService::Service::GetLastBlock(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::blockchain::Block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace blockchain

